/** @page improc_image_rotation Image Rotation
 *
 *  Algorithm main input : <BR>
 *  * image data ( matrix ).
 *  * grid image ( optional ). <BR> 
 *
 * Algorithm workflow: <BR>
 *  1. Select a source for rotation estimation.
 *     If grid image is provided, then grid image will be selected.
 *  2. Strengthen the grid edge ( If no grid image provided )
 *       1. Blur the image
 *       2. Discrete Fourier transform
 *       3. Apply north filter ( shadow filter )
 *       4. Inverse discrete Fourier transform
 *       5. Apply south filter ( shadow filter )
 *       6. Apply north and south filter 3 times
 *       7. Normalize and binarize
 *  3. Strengthen the grid edge ( If grid image provided )
 *       1. Normalize
 *       2. binarize
 *  4. Image Hough transform
 *  5. Estimate the entropy of all theta in histogram, and select minimum angle
 *  6. Output the selected angle
 *
 *  detail desciption of Hough Transform can see here @subpage hough_transform

 *  class reference  @ref cpt::improc::RotationEstimation @ref cpt::improc::RotationCalibration
 */


/** @page improc_gridding Image Gridding 
 *  Algorithm main input:
 *  
 *  * Image source
 *  * The upper bound of the grid line interval
 *
 *  Algorithm workflow: 
 *
 *  1. Fit sine wave with 2 directions ( x, y )
 *      1. Projection the image to 1 dimension with given direction
 *      2. Discrete Fourier transform, extract the frequency.
 *      3. Fit the sine wave by using linear regression and extract the phase.<BR>
 *         \f$ D = A sin( \omega t + \phi ) + C \f$
 *      4. Generate the grid line. 
 *  2. Collect the grid lines and create tiles of grid 
 *  3. Return tiles and column, row number.
 *
 *  class reference  @ref cpt::improc::Gridding
 */

/** @page improc_segmentation Image Segmentation (Deprecated in 1.0.6-dev)
 *  Algorithm main input:
 *  
 *  * Image source
 *  * Margin information
 *
 *  Algorithm workflow:  
 *
 *  This algorithm shrinks down all cells of the grid.  
 *
 *  The reason we do this adjustment is because the gridding step may not perfectly segment the cells, it may have some signal overflow to the neighboring cells.
 *  This process sampling the center of the cell to avoid the probe intensity cross talked.
 *
 *  class reference  @ref cpt::improc::Segmentation
 *
 */

/** @page improc_r_o_i_detection Image Region of Interest Detection
 *
 * Algorithm main input : 
 *
 * * marker information
 * * intensities grid
 * * grid coordinate system
 *
 * Algorithm workflow:  
 *
 * 1. Detect the marker by pattern match 
 * 2. Bound the exact intensities region of the intensities grid by the marker pattern.<BR>
 *    For example:  <BR>
 *    If the marker size is 10*10, the interval of marker 116 and there are 2*2 markers ver on intensities grid then the algorithm will try to bound a 126 * 126 region on the grid. <BR>
 * 3. Fix the coordinate system, transform the grid to make sure the probe position ordered start from the left top. <BR>
 *    To do this step is because that the image's probe coordinate system may not the same  matrix,
 *    and the origin position of the matrix in OpenCV library is starting from the left top and row major.
 *    To make sure coordinate and probe intensities is matched, this step is necessary.
 * 4. Extract the bounded intensities.
 * 5. Write back to the Intensities grid.
 *
 *  class reference  @ref cpt::improc::ROIDetection
 */

/** @page improc_stitiching Image Stitching
 *
 * Algorithm main input: 
 *
 * * intensities grids 
 * * every image's most left top marker's probe absolute position.
 *
 *   For example : 
 *
 *   If the marker size is 10*10, the interval of marker 116 and there are 2*2 markers cover on intensities grid. <BR>
 *   Then the image 0_0 usually related to (2,2), 1_0 related to (2,118).
 *
 * Algorithm workflow: 
 * 
 * Stitch image by every images' marker position.
 * In overlap regions, the stitching algorithm will select the cell has the minimum CV as the result of overlap region.
 */

/** @page improc_background_fix_sub_and_division01 Image Background Fix
 *
 * Algorithm main input:
 *
 * * probe grid ( grid after ROI )
 * * raw image ( image after ROI )
 * * marker information, include height, width, x and y direction interval
 * * the local segment number in x and y direction, which denote as sxn, syn.
 * * local background percentage, which denote as p
 *
 * Algorithm workflow:
 *
 * 1.   Use marker information to filter the marker probe on probe grid.
 * 2.   Split the raw image and probe grid into sxn * syn segment. 
 *      For example, let sxn=4, syn=4 and probe gird width=16, height=20, 
 *      then the probe grid will be segment into 16 pieces and every pieces has width=4 and height=5.
 * 3.   For each grid segment, select the lowest p percentage probes' intensities in probe grid, 
 *      and compute the mean of these probe intensities, the result is the local background.
 * 4.   For each pixel v of related segment in raw image, fix the pixel v by:
 *         \f$ v = (v - local background) / local background \f$ 
 *
 * 5.   The local background will then used by global background process.
 *      1. Compute the mean of all locol backgrounds, which represent the global mean.
 *      2. For each pixel v, multiply the global mean and the result is the final background fixed image of this algorithm.
 *
 */


/** @page improc_min_cv_auto_margin Image Min CV Segmentation
 *
 *
 * Algorithm main input:
 *
 * * raw image
 * * image grid tiles
 * * new tile width and height after margin
 *
 * Algorithm workflow:
 *
 * 1. For each tiles, scan the pixels in tile by sliding windows with new tile width and height and compute the CV for every windows.
 * 2. Select the window which has minimun CV to be the new tile.
 *
 * Note that, \f$ CV = stddev / mean \f$
 *
 */